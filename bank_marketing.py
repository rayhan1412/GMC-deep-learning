# -*- coding: utf-8 -*-
"""BANK marketing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UsuP9Z-ExOcXLw78ZZ4rS-_a4zjApvG4
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
from plotly.offline import plot, iplot
import cufflinks as cf 
from __future__ import print_function
import keras
from keras.datasets import fashion_mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop, Adam
import numpy as np 
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split
from keras.callbacks import EarlyStopping

data=pd.read_csv('bank.csv')
data

data.isnull().sum().sum()

data.info()

data.describe()

data.groupby('deposit').mean()

data["poutcome"].head()

data= data.drop('poutcome',axis=1)

encoder=LabelEncoder()
data["job"]=encoder.fit_transform(data["job"])
data["marital"]=encoder.fit_transform(data["marital"])
data["education"]=encoder.fit_transform(data["education"])
data["loan"]=encoder.fit_transform(data["loan"])
data["default"]=encoder.fit_transform(data["default"])
data["month"]=encoder.fit_transform(data["month"])

data["deposit"]=encoder.fit_transform(data["deposit"])
data["contact"]=encoder.fit_transform(data["contact"])
data["housing"]=encoder.fit_transform(data["housing"])
data

data['deposit'].value_counts()

"""data is balanced"""

corr = data.corr()
corr.style.background_gradient(cmap='coolwarm').set_precision(2)

sns.catplot(x="deposit", y="balance",  kind="bar", data=data)

sns.catplot(x="deposit", y="duration", hue="education", kind="box", data=data)

x = data.drop("deposit",axis=1)

y = data["deposit"]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=0)

data.fillna(value='', inplace=True)

x_train.info()

model = Sequential([
  Dense(64, activation='relu',),
  Dense(64, activation='relu'),
  Dense(1, activation='sigmoid')])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=["accuracy"])

history = model.fit(
  x_train, 
  y_train, 
  epochs=10, 
  batch_size=70,
 
  )





